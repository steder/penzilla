<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content=
          "HTML Tidy for Linux/x86 (vers 1st August 2004), see www.w3.org" />
    <title>Penzilla.net: Introduction to Python: BobChat</title>
    <link rel="StyleSheet" href="../../style.css" type="text/css" media="screen" />
  </head>
  <body>
    <div id="header">
      <h1>A Python Networking Example</h1>
      <h2>BobChat: v0.1 Server</h2>
      <hr /></div>
    <div id="sidebar">
      <div id="menu"><a href="../../index.shtml">&raquo;Tutorial Home</a>
        <!--#include virtual="/tutorials/python/BobChat/menu.html"-->
        <!--#include virtual="/tutorials/python/menu.html"-->
      </div>
      <!--#include virtual="/tutorials/python/skyscraper_ads.html"--></div>
    <div id="content"><!-- Comments -->
      <!-- Body -->
      <h3>v0.1 Server</h3>
      <h4>About Select</h4>
      <p>The v0.1 server is built on a special socket function called "select".  Select 
        is an asynchronous operation, meaning that it doesn't wait(or block) until data has been
        sent or received.  Instead it is capable of multiplexing over a large number of sockets
        and only receiving or sending data on those sockets when they are ready to be written
        to or read from.</p>
      <p>Select is a good alternative to a multithreaded server because:
        <ul>
          <li>It is easier to program and conceptualize</li>
          <li>Unless you're dealing with long requests, spawning threads for each request is overkill</li>
        </ul>
      </p>
      <h3>Code</h3>
      <p>Here is the complete v0.1 server code listing.  I'll explain pieces next.</p>
      <div id="code">
        <!--#include virtual="BobServer.py.html"-->
      </div>
      <h4>Servers need to listen</h4>
      <p>The following code is a basic part of what makes a server a server.</p>
      <div id="code">
        <pre><code>
# Create an reading socket.
portsock = socket(AF_INET, SOCK_STREAM)
portsock.bind((HOSTNAME, PORT))
portsock.listen(5)
        </code></pre>
      </div>
      <p>You create a 
        socket object and "bind" yourself to it, which is kind of like listing your address or 
        phone number so that others know how to contact you.  <i>(i.e. You can reach me on 
          HOSTNAME street, house number PORT).</i>  The "listen" function puts this socket 
        officially into 'server' mode, and the argument (5) is the backlog.  <i>(The number of 
          connections the server will queue before denying clients.  This number really only comes
          into play when your server is getting hit with new connections faster then it can handle.)
        </i>
      </p>
      <h5>Socket Types</h5>
      <p>The constants AF_INET and SOCK_STREAM specify the type of socket.  These are common
        values that give us an IPv4 TCP/IP socket.  (AF_INET specifies IPv4, SOCK_STREAM specifies 
        TCP/IP as the protocol).  Most applications on the web today use IPv4 and TCP/IP.</p>
      <p>The alternative to TCP/IP is UDP, which uses the constant SOCK_DGRAM.  TCP/IP provides
        error checking and guarantees that packets of data arrive at their destination.  TCP/IP also
        guarantees that packets arrive in order.  UDP on the other hand simple throws packets of data 
        out onto the network and does not guarantee that they will arrive, much less arrive in 
        order.</p>
      <p>UDP is useful for specifying your own low level protocols (like TCP/IP), and it's also used
        in some common applications and games where reliability isn't as important as speed.  Some
        data transfer applications use UDP rather then TCP/IP because the order the data arrives is
        not as important as the speed with which the data is sent.  TCP/IP's error checking tends to 
        make it slower.  It is important to remember that there is a tradeoff between speed
        and reliability in these applications.</p>
      <h5>Socket Lists</h5>
      <div id="code">
        <pre><code>
# Make main sockets for accepting new client requests.
mainsocks, readsocks, writesocks = [],[],[]

# SNIP #

# These lists are used by select.  For now we just have incoming sockets
mainsocks.append(portsock)
readsocks.append(portsock)

# Message Queue
Q = []
        </code></pre>
      </div>
      <p>The server uses a set of lists to manage its sockets.</p>
      <p>Mainsocks is simply the list of sockets that the server listens to.  In this example
        (and most of BobChat) this will only be a single socket.  The list is used incase I were to
        open multiple sockets on multiple ports or something similar.</p>
      <p>Readsocks is the list of sockets that select will monitor for incoming messages.  Each
        client will have one entry in the readsocks list.</p>
      <p>Writesocks is the list of sockets that the server will write to to send messages to 
        its clients.  Select will monitor this list to see if these sends have completed.</p>
      <p>Q is a qute name... haha...</p>
      <p>Q is a cute name for a Queue or FIFO(first in, first out) datastructure.  It's extremely
        easy to implement a queue in Python.  You can simply use a list and always append to
        add elements and always remove elements in order from the beginning of the list.
      </p>
      <p>In this case Q is a list of messages that are waiting to be sent to the connected Client(s).</p>
      <h4>The Main Loop</h4>
      <P>The server itself is simply the "ServeIt" method, which consists of a single main "select"
        loop.  each iteration of the loop calls</p>
      <div id="code">
        <pre><code>
readables, writeables, exceptions = select(readsocks,writesocks,[])
        </code></pre>
      </div>
      <p>Which <u>selects</u> the sockets from readsocks that are <u>readable</u> and puts them in the <u>readables</u> list as well as <u>selects</u> the sockets from writesocks that are <u>writable</u> and puts them in the <u>writeables</u> list.</p>
      <h4>Loop over readable sockets</h4>
     <div id="code">
        <pre><code>
for sockobj in readables:    
        </pre></code>
      </div>
      <h5>Accepting New Connections</h5>
      <div id="code">
        <pre><code>
    if sockobj in mainsocks:
        # port socket: accept new client
        newsock, address = sockobj.accept()
        print 'Connect:', address, id(newsock)
        readsocks.append(newsock)
        </pre></code>
      </div>
      <h5>Reading Data</h5>
      <p>If it's not a new socket we should attempt to read data from it (since it's readable).
        If the data is None / "" ( no message ) that indicates that the socket was closed or
        disconnected.  The "if not data:" case handles this by closing the socket on the server
        and removing it from the servers socket lists.</p>
      <p>Otherwise the message is simply placed in the queue and the socket is now 
        considered writable</p>
      <div id="code">
        <pre><code>
            else:
                # This is already an open connection, handle it
                try:
                    data = sockobj.recv(1024)
                    print '\tgot', data, 'on', id(sockobj)
                    if not data:
                        sockobj.close()
                        readsocks.remove(sockobj)
                        if sockobj in writesocks:
                            writesocks.remove(sockobj)
                    else:
                        # Drop message in the Q
                        Q.append(data)
                        # Make the socket writable
                        if not (sockobj in writesocks):
                            writesocks.append(sockobj)
                except:
                    pass
        </pre></code>
      </div>
      <p>The try statement above is overly general.  It's there simply to catch EOF errors from
        sockets when they run out of data.</p>
      <h4>Loop over Q/writables</h4>
      <div id="code">
        <pre><code>        
       while 1:
            if (len(writeables)==0) or (len(Q) == 0):
                break
            message = Q[0]
            # Actually Write Messages
            for sockobj in writeables:
                # Name(Time): Message
                try:
                    sockobj.send( "%s(%s): %s" % (id(sockobj), now(), message))
                    print "\tsent",message,"to", id(sockobj)
                except:
                    pass
            Q.remove(message)
        </pre></code>
      </div>
      <p>Because writing is more unpredictable we use a while loop here and simply break out 
        when we've emptied either of writables or Q lists.</p>
      <!--End Body-->
    </div>
    <div id="footer">
      <!--#include virtual="/tutorials/python/footer.shtml"-->
    </div>
  </body>
</html>

<!--
<div id="code">
  <pre><code>
  </pre></code>
</div>
-->
