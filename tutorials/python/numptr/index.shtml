<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta name="generator" content=
          "HTML Tidy for Linux/x86 (vers 1st August 2004), see www.w3.org" />
    <title>Penzilla.net's Python Tutorial: NumPtr</title>
    <link rel="StyleSheet" href="../style.css" type="text/css" media="screen" />
  </head>
  <body>
    <div id="header">
      <h1>Penzilla.net's Python Tutorial:</h1>
      <h2>Pointers to Numeric Arrays with NumPtr</h2>
      <hr /></div>
    <div id="sidebar">
      <div id="menu"><a href="../index.shtml">&raquo;Tutorial Home</a> 
        <!--#include virtual="/tutorials/python/menu.html"--></div>
      <!--#include virtual="/tutorials/python/skyscraper_ads.html"--></div>
    <div id="content"><!-- Comments -->
      <h3>The NumPtr Module</h3>
      <h4>Why?</h4>
      <P>Imagine that you have some Python code that needs to do some quick number crunching.  After prototyping the algorithm in Python you find that
        it is far too slow for your purposes.  To produce results faster you rewrite the algorithm in C.  However, you would still like to have access to the data in
        Python as well.  There are a number of reasons that you might need access to the data in both C and Python.  Perhaps you need to generate the data
        in C and then simply access it in Python to format it and display in on a webpage or otherwise visualize the data.  Perhaps you generate the dataset in Python and simply want to leverage C to get some of your calculations finished a bit faster.</P>
      <P>Whatever the reasoning, an easy way to make your C code accessible from Python is by using <a href="../swig">SWIG</a>.  Earlier I show an <a href="../numpyc/">example</a> of a way to use Numeric Arrays with C code.  However, this requires manually writing C extensions which is often a hassle when you have a large amount of C code you'd like to wrap and use from Python.  To speed up the process you can use SWIG.</P>
      <P>However, SWIG does not handle C arrays very gracefully.</P>
      <P>NumPtr ( download <a href="NumPtr-1.1.tar.gz">NumPtr-1.1.tar.gz</a> ) is a simple module that can take a Numeric array and return a SWIG-understandable pointer to that arrays data, allowing you to access that array normally in your SWIG'ed C code.</P>
      
      <h3>An Example</h3>
      <P>Let's do a quick example.  Assume we have a file "average.c" which contains a single function "double ave( int n, double *array );".  "ave" takes a single argument, an array of doubles, and returns a single result(also a double).  We would swig this code with the following interface file:</P>
      <div id="code"><pre><code>
/* file: average.i */
%module average
%{
extern double ave( int n, double *array );
%}
%include average.c
</code></pre></div> 

      <P>The C Code that defines ave might look like:</P>
      <div id="code">
        <!--#include virtual="average.c.html"-->
      </div>
      <P>You could access this average function like this:</P>
      
      <!--Include Sourcecode-->
      <div id="code">
        <!--#include virtual="example.py.html"-->
      </div>
      
      <P>
        We can compile this code using the same commands used on my <a href="../swig/">SWIG page</a>.
      </P>

      <h4>Download this example:</h4>
      <P>You can download this example along with NumPtr here:<br/>
        <a href="numptr-example.tar.gz">numptr-example.tar.gz</a>
      </P>
      
    </div>
    <div id="footer">
      <!--#include virtual="/tutorials/python/footer.shtml"-->
    </div>
  </body>
</html>
      
